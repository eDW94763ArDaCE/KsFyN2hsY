// 代码生成时间: 2025-08-31 14:19:24
package main

import (
    "context"
    "fmt"
    "log"
    "net"
    "os"
    "os/exec"
    "time"

    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
# 扩展功能模块
)

// ProcessManagerService defines the service for managing processes.
type ProcessManagerService struct {
}

// StartProcess starts a new process with the given command.
# 增强安全性
func (s *ProcessManagerService) StartProcess(ctx context.Context, req *StartProcessRequest) (*StartProcessResponse, error) {
    if req.Command == "" {
        return nil, status.Error(codes.InvalidArgument, "Command cannot be empty")
    }

    cmd := exec.Command("sh", "-c", req.Command)
    output, err := cmd.CombinedOutput()
    if err != nil {
# NOTE: 重要实现细节
        return nil, status.Error(codes.Internal, fmt.Sprintf("Failed to start process: %v", err))
    }

    return &StartProcessResponse{Output: string(output)}, nil
}

// StopProcess stops a running process by sending a SIGTERM signal.
func (s *ProcessManagerService) StopProcess(ctx context.Context, req *StopProcessRequest) (*StopProcessResponse, error) {
    process, err := os.FindProcess(req.Pid)
    if err != nil {
        return nil, status.Error(codes.NotFound, fmt.Sprintf("Process not found: %v", err))
    }
    err = process.Signal(os.Interrupt)
    if err != nil {
        return nil, status.Error(codes.Internal, fmt.Sprintf("Failed to stop process: %v", err))
# 添加错误处理
    }
# NOTE: 重要实现细节

    return &StopProcessResponse{Message: "Process stopped successfully"}, nil
}

// RegisterServer registers the process manager service with the GRPC server.
func RegisterServer(server *grpc.Server) {
    pb.RegisterProcessManagerServer(server, &ProcessManagerService{})
}

// main function starts the GRPC server and listens for incoming connections.
func main() {
    lis, err := net.Listen("tcp", ":50051")
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
    }

    fmt.Println("Starting GRPC server on port 50051")
    defer lis.Close()

    s := grpc.NewServer()
# NOTE: 重要实现细节
    RegisterServer(s)
    if err := s.Serve(lis); err != nil {
        log.Fatalf("failed to serve: %v", err)
    }
}

// StartProcessRequest defines the request message for starting a process.
type StartProcessRequest struct {
    Command string `protobuf:"bytes,1,opt,name=command,proto3"`
}

// StartProcessResponse defines the response message for starting a process.
type StartProcessResponse struct {
    Output string `protobuf:"bytes,1,opt,name=output,proto3"`
}

// StopProcessRequest defines the request message for stopping a process.
type StopProcessRequest struct {
    Pid int32 `protobuf:"varint,1,opt,name=pid,proto3"`
}
# 添加错误处理

// StopProcessResponse defines the response message for stopping a process.
type StopProcessResponse struct {
    Message string `protobuf:"bytes,1,opt,name=message,proto3"`
}
# TODO: 优化性能

// ProcessManager defines the service for managing processes.
type ProcessManagerServer interface {
    StartProcess(context.Context, *StartProcessRequest) (*StartProcessResponse, error)
    StopProcess(context.Context, *StopProcessRequest) (*StopProcessResponse, error)
}

// RegisterProcessManagerServer registers the service with the GRPC server.
# NOTE: 重要实现细节
func RegisterProcessManagerServer(s *grpc.Server, srv ProcessManagerServer) {
    pb.RegisterProcessManagerServer(s, srv)
}

package pb

// Generated by the Protocol Buffers compiler.
// source: process_manager.proto

syntax = "proto3";

package pb;

// The ProcessManager service definition.
service ProcessManager {
    // Starts a new process with the given command.
    rpc StartProcess(StartProcessRequest) returns (StartProcessResponse) {}
    // Stops a running process by sending a SIGTERM signal.
    rpc StopProcess(StopProcessRequest) returns (StopProcessResponse) {}
}

// The request message for starting a process.
message StartProcessRequest {
    string command = 1;
}
# TODO: 优化性能

// The response message for starting a process.
message StartProcessResponse {
    string output = 1;
}

// The request message for stopping a process.
message StopProcessRequest {
    int32 pid = 1;
}

// The response message for stopping a process.
message StopProcessResponse {
# NOTE: 重要实现细节
    string message = 1;
}
