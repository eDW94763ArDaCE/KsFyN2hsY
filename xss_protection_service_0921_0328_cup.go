// 代码生成时间: 2025-09-21 03:28:26
package main

import (
    "fmt"
    "html"
    "log"
    "net"
    "google.golang.org/grpc"
    "golang.org/x/net/context"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
)

// The XSSServiceServer struct defines the server that will handle incoming gRPC requests.
type XSSServiceServer struct {
    // No additional fields needed for this example.
}

// XSSService provides a simple interface for XSS protection.
type XSSService interface {
    Sanitize(ctx context.Context, in *SanitizeRequest) (*SanitizeResponse, error)
}

// SanitizeRequest is the request message for the Sanitize method.
type SanitizeRequest struct {
    Data string
}

// SanitizeResponse is the response message for the Sanitize method.
type SanitizeResponse struct {
    SanitizedData string
}

// Sanitize sanitizes the input data to prevent XSS attacks.
func (s *XSSServiceServer) Sanitize(ctx context.Context, in *SanitizeRequest) (*SanitizeResponse, error) {
    // Use html.EscapeString to sanitize the input data.
    sanitizedData := html.EscapeString(in.Data)

    // Return the sanitized data in the response.
    return &SanitizeResponse{SanitizedData: sanitizedData}, nil
}

// server is used to implement XSSServiceServer.
func server(lis net.Listener) {
    grpcServer := grpc.NewServer()
    // Register the XSSService on the gRPC server.
    RegisterXSSServiceServer(grpcServer, &XSSServiceServer{})

    // Start serving requests.
    if err := grpcServer.Serve(lis); err != nil {
        log.Fatalf("Failed to serve: %v", err)
    }
}

func main() {
    lis, err := net.Listen("tcp", ":50051")
    if err != nil {
        log.Fatalf("Failed to listen: %v", err)
    }
    server(lis)
}

// The following are the generated code for the gRPC service.
// These should be placed in a separate file, generated by the protocol buffers compiler.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// 	protoc-gen-go-grpc v1.2.0
// 	protoc        v3.19.4

package main

import (
    "context"
    "go.opentelemetry.io/otel"
    "go.opentelemetry.io/otel/trace"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// XSSServiceClient is the client API for XSSService service.
type XSSServiceClient interface {
    Sanitize(ctx context.Context, in *SanitizeRequest, opts ...grpc.CallOption) (*SanitizeResponse, error)
}

type xSSServiceClient struct {
    cc grpc.ClientConnInterface
}

func NewXSSServiceClient(cc grpc.ClientConnInterface) XSSServiceClient {
    return &xSSServiceClient{cc}
}

func (c *xSSServiceClient) Sanitize(ctx context.Context, in *SanitizeRequest, opts ...grpc.CallOption) (*SanitizeResponse, error) {
    out := new(SanitizeResponse)
    err := c.cc.Invoke(ctx, "/XSSService/Sanitize", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

// XSSServiceServer is the server API for XSSService service.
type XSSServiceServer interface {
    Sanitize(context.Context, *SanitizeRequest) (*SanitizeResponse, error)
}

// UnimplementedXSSServiceServer can be embedded to have forward compatible methods.
type UnimplementedXSSServiceServer struct{}

func (*UnimplementedXSSServiceServer) Sanitize(ctx context.Context, req *SanitizeRequest) (*SanitizeResponse, error) {
    return nil, status.Errorf(codes.Unimplemented, "method Sanitize not implemented")
}

func RegisterXSSServiceServer(s *grpc.Server, srv XSSServiceServer) {
    s.RegisterService(&_XSSService_serviceDesc, srv)
}

func _XSSService_Sanitize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(SanitizeRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil { return srv.(XSSServiceServer).Sanitize(ctx, in) }
    info := &grpc.UnaryServerInfo{
       Server:     srv,
        FullMethod: "/XSSService/Sanitize",
    }
    
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(XSSServiceServer).Sanitize(ctx, req.(*SanitizeRequest))
    }
    return interceptor(ctx, in, info, handler)
}

var _XSSService_serviceDesc = grpc.ServiceDesc{
    ServiceName: "XSSService",
    HandlerType: (*XSSServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "Sanitize",
            Handler: _XSSService_Sanitize_Handler,
        },
    },
    Streams:  []grpc.StreamDesc{},
    Metadata: "xss_service.proto",
}
